EL, JSTL => 표현식, 스크립틀릿을 걷어내기 위함
			=> JSP파일을 최대한 태그처럼 보이게 하기 위함(자바코드 걷어냄)

JSTL 태그라이브러리 사용방법 지시자<%@ %>
1. taglib 지시자를 선언
 <%@ taglib prefix ="네임스페이스(일종의 패키지, 다른 사용자가 정한 이름과 겹쳐도 문제 없도록 접두어를 붙이는 것),
 	 개발자가 편한대로 지정가능, 관습적으로 많이 사용하는 prefix를 보통 따름" 
 	 uri="사용하려고하는 태그의 식별자" %>

core 태그 라이브러리 : c
국제화 태그 라이브러리 : fmt
 


CORE tag 라이브러리
속성 저장 
Request.setAttribute(“속성명”, 속성값);
session.setAttribute(“속성명”, 속성값);

el 사용시 null값 처리를 자동으로 함 ==> registUser.jsp null 처리 간소화 작업

ctrl + h ==> 검색 치환

<%=request.getContextPath()%> ==> ${pageContext.request.contextPath}

${pageContext.}
${param.}
${속성명}

${request...} (이렇게 쓰면 안됨 request는 제공 X)

JSTL CORE 조건 제어 (java if)
if  ==> java 단일 if
choose ==> java if, else if, else

JSTL 반복문(for, 향상된 for) ****많이 사용****
forEach

JSTL core URL
import : 특정 url에서 변화하는 값 (html)을 호출하는 곳에 추가하는 기능
redirect : 클라이언트에게 다른 url로 재전송 요청
url : url 경로 작성

JSTL core 기타
catch
out

필터(Filter)
요청을 처리할 servlet, jsp로 요청이 전달되기 전에 사전에 먼저 요청을 받아 
공통적인 작업을 처리할 수 있는 객체

1. 필터는 여러개 등록할 수 있다
	. 요청 - 필터1- 필터2 .... : 최종적으로 해당 요청을 처리할 servlet, jsp로 요청이 전달
	  servlet, jsp에 의해 응답이 생성되면 거쳐온 필터의 역순으로 응답이 전달된다.
	  servlet, jsp ==> 필터2 - 필터1 --- 최종 응답 전달
	  
2. 필터 생성 방법
	. Filter 인터페이스 구현
	 . init, destroy, doFilter

3. 필터 등록 
	web.xml 등록
	@webFilter
	

실습 : 요청 URI 통계 필터
	request.getRequestURI()
	Map<String, Integer> map;
	key - uri, 값은 - 요청 횟수
	
		/login.jsp, 5
		/pagingUser, 15
		
	요청 통계자료를 담은 map객체를 다른 servlet, jsp에서도 활용하려면?? applicationScope에 저장
	
	








