
HTTP 프로토콜의 특징

1. 비연결성
	- 요청을 보내고 응답을 받게되면 서버와의 연결은 끊어진다.
	- 서버로 재요청시 서버는 클라이언트가 누구인지 알 수 있도록 SESSION과 COOKIE를 이용
	
2. 웹브라우저는 서버로 요청시 해당 서버(도메인)에 설정된 쿠키 값을 항상 같이 전송한다
	- 서버가 클라이언트가 누구인지 식별할때 사용
	- cookie : 웹 브라우저에 저장되는 정보임, 보안에 취약 (개발자도구 -> 어플리케이션 탭에서 확인 가능)

3. java기반 서버는 요청을 받게 되면 해당 요청의 쿠키 정보중에
	JSESSIONID라는 쿠키가 있는지 확인한다 https://dmobi.tistory.com/136
	
	JSESSIONID라는 이름은 바꿀 수 있음
	
	JSESSIONID 쿠키가 없을 경우
	 - 서버는 신규 접속 요청이라고 판단, SESSION을 새롭게 만들고 응답을 생성할 때
	   SESSION ID(J_SESSIONID)를 응답헤더에 포함하고 해당 응답을 받은 브라우저는
	   JSESSIONID 쿠키 값을 브라우저에 저장한다
	
	JSESSIONID 쿠키가 있을 경우
	 - JSESSION에 해당하는 SESSION을 사용(기존 접속한 사용자로 인식)
	
SESSION과 COOKIE가 어떻게 동작하는지 ?? 찾아보기 https://jeong-pro.tistory.com/80

웹에서 사용자(client)란?

Q : 동일한 인물? A : 아니다

cookie 길찾기 ==> 동화 헨젤과 그레텔에서 착안

스코프 : 웹 어플리케이션에서 객체(속성, attribute)를 유지/공유하는 영역 (속성을 저장할 수 있는 공간)
속 성 : 클라이언트의 요청을 처리하는 과정에서 servlet/jsp사이에서 공유하는 정보

	<스코프 4가지> https://jerryjerryjerry.tistory.com/32
			
			page : jsp페이지 내에서만 공유되는 영역 jsp : pageContext servlet : N/A 
					참고 : 자바에서 지역변수(if,for block)와 비슷한 의미
 빈도 95% ** request : 클라이언트의 요청 정보가 유지되는 동안 공유되는 영역(dispatch) jsp : request servlet : request ** 
 					참고 : 자바에서 지역변수와 비슷한 의미
 빈도 5%  ** session : 클라이언트의 정보가 유지되는 동안 공유되는 영역 jsp : session servlet : request.getSession() ** 
 					참고 : 자바에서 인스턴스 변수와 비슷한 의미
			application : 웹어플리케이션 내에서 공유되는 객체의 영역 jsp : application servlet : getServletContext() 
					참고 : 자바에서 스태틱 변수와 비슷한 의미

속성 : 요청을 처리하는 과정에서 servlet/jsp 사이에서 공유하는 정보
scope : 속성을 담을 수 있는 영역, 객체

scope 객체 
page (pageContext)			 : 해당 jsp 페이지 내에서만 유효한 공간(java의 block 안에 선언된 지역변수)
request (HttpServletRequest) : 요청이 처리될 때까지 유효한 공간(java의 지역변수)
session(HttpSession)		 : 세션이 유효한 동안 유지되는 공간 (java의 인스턴스 객체)
application(ServletContext)  : 웹 어플리케이션에서 하나만 유지되는 공간(java의 static 변수)

scope 객체 실습

웹브라우저로 다음 주소에 접속 : localhost/scope (get방식)
해당 요청을 처리해줄 servlet 생성 (kr.or.ddit.servlet.scope.Scope.java)
GET 요청에 대해서는 화면을 webapp/jsp/scope.jsp로 응답생성 위임

scope.jsp에는 하나의 input 태그(name - scope) 와 submit 버튼을 생성
전송 메소드는 post, 전송 주소는 /scope

Scope.java의 doPost에서는 요청 파라미터 중 scope파라미터를 확인하여
request, session, application scope에 다음과 같이 속성을 저장

request : 속성명 = request, 속성값=scope파라미터값 + "_request"
session : 속성명 = session, 속성값=scope파라미터값 + "_session"
application : 속성명 = application, 속성값=scope파라미터값 + "_application"

속성 설정이 끝나면 webapp/jsp/scope.jsp로 forward
scopeResult.jsp에서는 Scope servlet에서 설정한 3개의 속성을
속성명 : 속성값
속성명 : 속성값
속성명 : 속성값 형식으로 화면에 출력

scope객체의 속성관련 메소드
속성 조회 : 스코프객체.getAttribute("속성명"), 반환타입 : Object
			** 비교 getParameter("파라미터명"), 반환타입 : String
			
속성 저장 : 스코프객체.setAttribute("속성명", "속성값") , 반환타입 : void

속성 삭제 : 스코프객체.removeAttribute("속성명"), 반환타입 : void

속성 이름 검색 : 스코프객체.getAttributeNames(), 반환타입 : Enumeration

테스트

1 ] 최초 접속
1. localhost/scope 접속
2. input tag에 brown 값 입력후 전송 버튼 클릭
3. 결과 화면 확인
	request : brown_request
	session : brown_session
	application : brown_application
	
2 ] 1번과 같은 브라우저를 사용하여
	localhost/jsp/scopeResult.jsp로 바로 접속시
	 request : NULL
	 session : brown_session
	 application : brown_application	

3 ] 1번과 다른 브라우저를 사용하여(Edge사용 - 다른 사용자라 가정)
	localhost/jsp/scopeResult.jsp로 바로 접속시
	 request : NULL
	 session : NULL
	 application : brown_application	
	
4 ] 3번과 동일한 브라우저를 사용하여
	localhost/scope로 접속
	input 태그에 sally값 입력 후 전송
	 request : sally_request
	 session : sally_session
	 application : sally_application
	 
5 ] 1]번과 동일한 브라우저를 사용하여 
	localhost/jsp/scopeResult.jsp로 접속
	 request : null
	 session : brown_session
	 application : sally_application
	
1 ] 번 브라우저 : 크롬
3 ] 번 브라우저 : edge

실습 2)
localhost/CONTEXT_PATH/sumCalculation

get(화면요청)
 start, end parameter를 입력/전송할 수 있도록 화면구성(input, form tag사용)
 sumCalculation servlet으로 요청
 (사용자가 start값을 end보다 작은 값을 넣는다고 가정)
 
post(결과 처리)
logger로 start파라미터와 end파라미터 사이의 값을 합으로 계산후 출력
start와 end사이의 값을 더하여 session에 "sumResult"키로 저장
sumResult.jsp로 dispatch forward
session에 저장된 sumResult값을 화면에 출력


실습 3)
2]두 파라미터의 곱 구하기
ex : 2, 5 ==> 10

localhost/CONTEXT_PATH/mulCalculation

get(화면요청)
param1, param2 parameter를 입력/전송 할 수 있도록 화면구성 
mulCalculation servlet으로 요청
(사용자가 param1 값을 param2 보다 작은 값을 넣는다고 가정)

post(결과 처리)
logger로 param1 파라미터와 param2 파라미터 의 곱을 계산후 출력
param1과 param2 값을 곱하여 session에 “mulResult”키로 저장
mulResult.jsp로 dispatch forward
session에 저장된 mulResult 값을 화면에 출력















	
	
	
	 