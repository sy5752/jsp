Model 1 : 요청을 jsp가 접수, 응답도 jsp에서 생성
		  비즈니스 로직이 (model)이 jsp(view)안에서 호출됨
		  만약 다른 jsp(view)에서도 동일한 비즈니스 로직(model)을 사용할 경우
		  비즈니스 로직의 변경시 많은 코드 수정이 동반된다 ==> 유지 보수의 어려움

Model 2 : 역할의 구분으로 종속성이 낮아짐, 추후 확장시 유리

MVC 패턴 : Model - View - Controller
		  각 역할을 담당하는 객체를 분리
		  controller : 요청을 접수, 비즈니스 로직을 호출 및 저장 (scope)
		  Model : 비즈니스 로직 처리
		  View : 화면 출력을 담당
		  
		  Model 1과 다르게 view와 model을 분리
		  view에서 필요한 데이터는 scope객체를 통해 받는다
		  
Front Controller : 모든 요청을 하나의 객체가 접수 받는 형태
				   장점 : 모든 요청(Request)를 하나의 컨트롤러(Controller)를 통해 작업을 한 곳에서 수행할 수 있다.
	     				추적(Tracking)이나 보안(Security)를 적용할 때 하나의 컨트롤러(Controller)에 하기 때문에 편하다.
	     				파일 구조가 바뀌어도 URL을 유지할 수 있다.
	     				테스트하기가 편해진다() 외부라이브러리에 의존하지 않음
	     				
				   
서버 프로그램 개발
 - 표현 언어(Expression Language : EL)
 	jsp2.0버전부터 안내되는 규약(scope)
 	
 	scope 기본객체 영역에 있는 속성비율
 	수치, 관계 , 논리 연산
    표현식을 보다 쉽고 간결하게 사용할 수 있는 표현 방법
   
   영역명을 사용하지 않은 경우
   page, request, session, application
   
  el 기본 객체
  기본 객체명 
  initParam : 초기화 파라미터의<이름,값> 매핑을 저장한 Map객체 
  			  application.getInitParameter(name)의 결과와 동일
  pageContext : jsp기본객체 pageContext와 동일
 	
 	