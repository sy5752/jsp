System.out.println 앞으로 사용 금지
왜?

logging 사용 이유 : 개발시 의도한 대로 동작하고 있는지를 검사
ex : 웹 브라우저를 통해 server로 요청 (localhost/basicServlet)
    doGet메소드가 호출이 되었는지 로그를 통해 확인

    파라미터가 의도한대로 서블릿으로 전달이 되었는지 확인
    
logging과 비슷한 목적으로 사용하는 것 : 디버깅

log level 설정에 따른 logger 메소드 동작여부

로깅 문자열 결합을 피하기 위한 방법
문자열 결합은 왜 피해야 하는가?

짧은 버전 : 예, 더 적은 코드로 더 빠릅니다!

문자열 연결은 필요한지 여부를 알지 못해도 많은 작업을 수행하며 
(log4j에서 알려진 기존의 "디버깅이 활성화 됨"테스트) 가능한 경우 피해야합니다.
 {}는 toString () 호출 및 문자열 생성을 지연시킬 수 있기 때문입니다. 
 이벤트 캡처가 필요한지 여부가 결정된 후 로거 형식을 단일 문자열로 지정하면 
 코드가 제 생각에 더 깨끗해집니다.

========================================================================

servlet : java에 html 코드를 삽입
	생기는 문제점
	1. html 코드들이 문자 취급되기 때문에 오타를 발견하기가 어려움
	2. 협업의 문제점
		java - 프로그래머
		html - 디자이너
	3. 개발자가 코드를 리딩하는데 가독성의 문제
	==> jsp의 탄생 배경
	
jsp : html코드에 java코드를 삽입

1. jsp는 servlet으로 변환되어 서비스 된다
2. servlet-container(tomcat)이 jsp를 서블릿으로 변환하는 과정에서 사용하는 폴더는 work폴더
   - tomcat도 개발자가 만든 프로그램으로 비정상적으로 동작할때가 있음
   - 개발자가 jsp파일을 수정하였음에도 수정 내역이 반영되지 않을 경우
     work폴더에 생성된 jsp변환 파일들 (java, class)을 삭제해주면 새롭게 만들어 준다
3. jsp를 서블릿으로 변환하는 시기는 해당 jsp에 대해 최초 요청이 일어났을 경우에 변환
   - 서블릿으로 생성이 된 이후 같은 파일에 대한 요청은 이미 변환된 파일로 서비스
  
지시자 : page의 설정 정보
스크립틀릿 : java코드 기술 ==> JSTL(Standard Tag Library)
표현식 : 문자열로 출력 ==> EL(Expression Language, 표현언어)
주석 : 
선언부 : 변수나 메소드 선언 jsp는 화면 컨텐츠를 생성하는 역할 
		변수나 메소드는 로직 처리시 주로 사용
선언부 :
